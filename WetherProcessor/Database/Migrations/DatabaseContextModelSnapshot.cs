// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherProcessor.Database;
using WeatherProcessor.Database.Entities.Enums;

#nullable disable

namespace WeatherProcessor.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "month", new[] { "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "weather_type", new[] { "hase", "continuous_light_snow", "snow", "ice_needles", "rainfall_with_snow", "continuous_medium_snow", "light_rainfall_snow", "light_snow_with_breaks", "unchanged_state", "cloud_less", "light_pozemok", "cloud_forming", "rain", "rainfall", "continuous_light_rain", "remote_thunderstorm", "light_drizzle_with_ice", "continuous_heavy_snow", "drizzle_with_snow", "light_rainfall", "thunderstorm", "thunder_with_fallout", "continuous_medium_rain", "light_rain_with_ice", "rainfall_snow", "hail", "light_rain_with_breaks", "continuous_light_drizzle", "fog_forming_without_sky", "ice_rain", "drizzle_with_ice", "medium_rain_with_breaks", "individual_snow_crystals", "light_ice_snow_grains", "light_rainfall_with_snow", "light_rain_with_thunderstorm", "for_forming_with_sky", "continuous_heavy_rain", "drizzle", "snow_grains", "light_drizzle_with_rain", "fog_continuous_without_sky", "rain_with_thinderstorm", "very_heavy_rainfall", "ice_grains", "continuous_medium_drizzle", "fog", "fog_continuous_with_sky", "heavy_snow_with_breaks", "heavy_rain_drizzle_with_show", "none" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "wind_direction", new[] { "north", "north_east", "east", "south_east", "south", "south_west", "west", "north_west", "calm" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherProcessor.Database.Entities.WeatherReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Month>("Month")
                        .HasColumnType("month")
                        .HasColumnName("month");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("weather_report", (string)null);
                });

            modelBuilder.Entity("WeatherProcessor.Database.Entities.WeatherReportInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CloudCover")
                        .HasColumnType("integer")
                        .HasColumnName("cloud_cover");

                    b.Property<int>("CloudLowerLimit")
                        .HasColumnType("integer")
                        .HasColumnName("cloud_lower_limit");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision")
                        .HasColumnName("dew_point");

                    b.Property<double>("HorizontalVisibility")
                        .HasColumnType("double precision")
                        .HasColumnName("horizontal_visibility");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Pressure")
                        .HasColumnType("integer")
                        .HasColumnName("pressure");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<int>("WeatherReportId")
                        .HasColumnType("integer")
                        .HasColumnName("weather_report_id");

                    b.Property<WeatherType>("WeatherType")
                        .HasColumnType("weather_type")
                        .HasColumnName("weather_type");

                    b.Property<WindDirection[]>("WindDirections")
                        .HasColumnType("wind_direction[]")
                        .HasColumnName("wind_directions");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed");

                    b.HasKey("Id");

                    b.HasIndex("WeatherReportId");

                    b.ToTable("weather_report_info", (string)null);
                });

            modelBuilder.Entity("WeatherProcessor.Database.Entities.WeatherReportInfo", b =>
                {
                    b.HasOne("WeatherProcessor.Database.Entities.WeatherReport", "WeatherReport")
                        .WithMany("WeatherReportInfo")
                        .HasForeignKey("WeatherReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherReport");
                });

            modelBuilder.Entity("WeatherProcessor.Database.Entities.WeatherReport", b =>
                {
                    b.Navigation("WeatherReportInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
